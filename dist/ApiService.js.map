{"version":3,"sources":["../src/ApiService.ts","../src/ApiError.ts","../src/ApiAuthError.ts","../src/ApiConfig.ts","../src/ApiRequestQueueItem.ts","../src/ApiAdvancedResponse.ts"],"sourcesContent":["import ApiError from \"./ApiError\";\r\nimport ApiAuthError from \"./ApiAuthError\";\r\n// eslint-disable-next-line\r\nimport ApiConfig from \"./ApiConfig\";\r\nimport ApiRequestQueueItem from \"./ApiRequestQueueItem\";\r\nimport ApiAdvancedResponse from \"./ApiAdvancedResponse\";\r\nimport axios, {AxiosError} from \"axios\";\r\nimport _ from \"lodash\"\r\n\r\n// eslint-disable-next-line\r\nimport {AxiosInstance, AxiosResponse, AxiosRequestConfig} from \"axios\";\r\n\r\nclass ApiService {\r\n\r\n    private serviceId: string = ''\r\n\r\n    private config: ApiConfig\r\n\r\n    private requestsQueue: { [key: string]: ApiRequestQueueItem } = {}\r\n\r\n    private axiosInstance: AxiosInstance\r\n\r\n    /**\r\n     *\r\n     * @param {ApiConfig} apiConfig\r\n     */\r\n    constructor(apiConfig: ApiConfig) {\r\n        this.serviceId = crypto.randomUUID()\r\n        this.config = apiConfig\r\n        //axios configuration\r\n        this.axiosInstance = axios.create();\r\n\r\n        //intercept responses to keep the request queue up to date\r\n        this.axiosInstance.interceptors.response.use((response) => {\r\n            // Any status code that lie within the range of 2xx cause this function to trigger\r\n            if (response.config?.headers?.['X-Request-Id']) {\r\n                delete this.requestsQueue[response.config?.headers?.['X-Request-Id']]\r\n            }\r\n            return response;\r\n        }, (error) => {\r\n            // Any status codes that falls outside the range of 2xx cause this function to trigger\r\n            if (error.response?.config?.headers?.['X-Request-Id']) {\r\n                delete this.requestsQueue[error.response?.config?.headers?.['X-Request-Id']]\r\n            }\r\n            return Promise.reject(error);\r\n        });\r\n\r\n\r\n        console.log('Constructed ApiService #' + this.serviceId + ' for base url ' + apiConfig.baseUrl);\r\n    }\r\n\r\n    private createRequest = async (\r\n        urlPath: string,\r\n        data: any = null,\r\n        options: AxiosRequestConfig<any> = {},\r\n        authentication: boolean = true\r\n    ): Promise<ApiRequestQueueItem> => {\r\n\r\n        const fullUrl: string = this.buildUrl(urlPath)\r\n\r\n        const abortController: AbortController = new AbortController()\r\n\r\n        const requestId: string = crypto.randomUUID()\r\n\r\n        const axiosConfig: AxiosRequestConfig<any> = await this.buildAxiosConfig(options, abortController, authentication, requestId)\r\n\r\n        this.requestsQueue[requestId] = new ApiRequestQueueItem(requestId, fullUrl, data, axiosConfig, abortController, authentication)\r\n\r\n        return this.requestsQueue[requestId]\r\n    }\r\n\r\n    private buildUrl(urlPath: string): string {\r\n        if (urlPath.substring(0, 4) === 'http') {\r\n            return urlPath;\r\n        }\r\n\r\n        let cleanUrlPath = urlPath.replace(/^\\/+|\\/+$/g, '');\r\n        let append = '';\r\n        if (this.config.baseUrlParams !== '') {\r\n            append = '?';\r\n            if (cleanUrlPath.indexOf('?') > -1) {\r\n                append = '&';\r\n            }\r\n            append += this.config.baseUrlParams;\r\n        }\r\n\r\n        return this.config.baseUrl + '/' + cleanUrlPath + append;\r\n    }\r\n\r\n    private buildAxiosConfig = async (\r\n        options: AxiosRequestConfig<any> = {},\r\n        abortController: AbortController | null = null,\r\n        authentication: boolean = true,\r\n        requestId: string = crypto.randomUUID()\r\n    ): Promise<AxiosRequestConfig<any>> => {\r\n        let config = {\r\n            ...options\r\n        };\r\n\r\n        if (abortController instanceof AbortController) {\r\n            config.signal = abortController.signal\r\n        }\r\n\r\n        if (typeof (config.headers) === 'undefined') {\r\n            config.headers = {};\r\n        }\r\n\r\n        config.headers['X-Request-Id'] = requestId\r\n\r\n\r\n        if (authentication) {\r\n            //get access token\r\n            let accessToken = await this.config.getAccessTokenFn();\r\n            if (accessToken === '' || accessToken === null) {\r\n                console.log('empty access token');\r\n                throw new ApiAuthError('Authentication failed', 401);\r\n            }\r\n\r\n            if (typeof (config.headers) === 'undefined') {\r\n                config.headers = {};\r\n            }\r\n            config.headers['Authorization'] = 'Bearer ' + accessToken;\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * Standardize error reporting up the stack to our ApiError\r\n     * @param {Error} e\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    private apiErrorCatch = async (e: Error | AxiosError): Promise<void> => {\r\n        if (e instanceof AxiosError) {\r\n            //if it is a blob (file download)\r\n            if (e.request.responseType === 'blob' && e.response?.data instanceof Blob && e.response?.data.type && e.response?.data.type.toLowerCase().indexOf('json') != -1) {\r\n                let resolvedResponse = JSON.parse(await e.response?.data.text());\r\n                if (resolvedResponse.message) {\r\n                    throw new ApiError(resolvedResponse.message, resolvedResponse.status, resolvedResponse.data);\r\n                }\r\n            }\r\n\r\n            //api returned a structured error\r\n            if (e.response && e.response.data && e.response.data.message) {\r\n                throw new ApiError(e.response.data.message, e.response.status, e.response.data);\r\n            }\r\n\r\n            //clean up 400,404,500 etc\r\n            else if (e.response && e.response.status) {\r\n                throw new ApiError(e.message, e.response.status);\r\n            }\r\n        }\r\n\r\n        //axios error - presumably a network error\r\n        throw e\r\n    }\r\n\r\n\r\n    cancelRequest = async (requestId:string = ''):Promise<void> => {\r\n        await this.cancelRequests([requestId])\r\n    }\r\n\r\n    cancelRequests = async (requestIds:string[] = []):Promise<void> => {\r\n        //console.log('cancel requests')\r\n        //console.log(requestIds)\r\n        for (let i in requestIds) {\r\n            let requestId = requestIds[i]\r\n            if (this.requestsQueue[requestId]) {\r\n                if ( this.requestsQueue[requestId] && this.requestsQueue[requestId].abortController instanceof AbortController) {\r\n                    this.requestsQueue[requestId].abortController.abort()\r\n                }\r\n                delete this.requestsQueue[requestId]\r\n            }\r\n        }\r\n    }\r\n\r\n    cancelAll = async ():Promise<void> => {\r\n        await this.cancelRequests(Object.keys(this.requestsQueue))\r\n    }\r\n\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    getAdv = async (\r\n        url:string,\r\n        options:AxiosRequestConfig<any> = {},\r\n        authentication:boolean = true\r\n    ):Promise<ApiAdvancedResponse> => {\r\n        let requestQueueItem:ApiRequestQueueItem = await this.createRequest(url, null, options, authentication)\r\n        try {\r\n            let responsePromise:Promise<AxiosResponse<any, any>> = this.axiosInstance.get(requestQueueItem.url, requestQueueItem.axiosConfig)\r\n            return new ApiAdvancedResponse(requestQueueItem, responsePromise);\r\n        }\r\n        catch(e:any) {\r\n            if(e instanceof Error || e instanceof AxiosError) {\r\n                await this.apiErrorCatch(e)\r\n            }\r\n            throw e\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    get = async (\r\n        url:string,\r\n        options:AxiosRequestConfig<any> = {},\r\n        authentication:boolean = true\r\n    ):Promise<AxiosResponse> => {\r\n        let advResponse:ApiAdvancedResponse = await this.getAdv(url, options, authentication)\r\n        return advResponse.response;\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    postAdv = async (\r\n        url:string,\r\n        data:any,\r\n        options:AxiosRequestConfig<any> = {},\r\n        authentication:boolean = true\r\n    ):Promise<ApiAdvancedResponse> => {\r\n        let requestQueueItem = await this.createRequest(url, data, options, authentication)\r\n        try {\r\n            let responsePromise = this.axiosInstance.post(requestQueueItem.url, data, requestQueueItem.axiosConfig);\r\n            return new ApiAdvancedResponse(requestQueueItem, responsePromise);\r\n        }\r\n        catch(e:any) {\r\n            if(e instanceof Error || e instanceof AxiosError) {\r\n                await this.apiErrorCatch(e)\r\n            }\r\n            throw e\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    post = async (\r\n        url:string,\r\n        data:any,\r\n        options:AxiosRequestConfig<any> = {},\r\n        authentication:boolean = true\r\n    ):Promise<AxiosResponse> => {\r\n        let advResponse = await this.postAdv(url, data, options, authentication)\r\n        return advResponse.response;\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    postForm = async (\r\n        url:string,\r\n        data:any,\r\n        options:AxiosRequestConfig<any> = {},\r\n        authentication:boolean = true\r\n    ):Promise<AxiosResponse> => {\r\n        if (_.isEmpty(options.headers)) {\r\n            options.headers = {};\r\n        }\r\n        options.headers['Content-Type'] = 'multipart/form-data';\r\n        let requestQueueItem = await this.createRequest(url, data, options, authentication)\r\n        try {\r\n            return this.axiosInstance.post(requestQueueItem.url, data, requestQueueItem.axiosConfig);\r\n        }\r\n        catch(e:any) {\r\n            if(e instanceof Error || e instanceof AxiosError) {\r\n                await this.apiErrorCatch(e)\r\n            }\r\n            throw e\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    put = async (\r\n        url:string,\r\n        data:any,\r\n        options:AxiosRequestConfig<any> = {},\r\n        authentication:boolean = true\r\n    ):Promise<AxiosResponse> => {\r\n        let requestQueueItem = await this.createRequest(url, data, options, authentication)\r\n        try {\r\n            return this.axiosInstance.put(requestQueueItem.url, data, requestQueueItem.axiosConfig);\r\n        }\r\n        catch(e:any) {\r\n            if(e instanceof Error || e instanceof AxiosError) {\r\n                await this.apiErrorCatch(e)\r\n            }\r\n            throw e\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    delete = async (\r\n        url:string,\r\n        options:AxiosRequestConfig<any> = {},\r\n        authentication:boolean = true\r\n    ):Promise<AxiosResponse> => {\r\n        let requestQueueItem = await this.createRequest(url, null, options, authentication)\r\n        try {\r\n            return this.axiosInstance.delete(requestQueueItem.url, requestQueueItem.axiosConfig);\r\n        }\r\n        catch(e:any) {\r\n            if(e instanceof Error || e instanceof AxiosError) {\r\n                await this.apiErrorCatch(e)\r\n            }\r\n            throw e\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    postDownload = async (\r\n        url:string,\r\n        data:any,\r\n        options:AxiosRequestConfig<any> = {},\r\n        authentication:boolean = true\r\n    ):Promise<void> => {\r\n        let fullOptions:AxiosRequestConfig = {\r\n            ...options,\r\n            responseType: 'blob'\r\n        };\r\n\r\n        let requestQueueItem = await this.createRequest(url, data, fullOptions, authentication)\r\n\r\n        try {\r\n            let response:AxiosResponse  = await this.axiosInstance.post(requestQueueItem.url, data, requestQueueItem.axiosConfig)\r\n            this.doBrowserDownload(response)\r\n\r\n        }\r\n        catch(e:any) {\r\n            if(e instanceof Error || e instanceof AxiosError) {\r\n                await this.apiErrorCatch(e)\r\n            }\r\n            throw e\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    getDownload = async (\r\n        url:string,\r\n        options:AxiosRequestConfig<any> = {},\r\n        authentication:boolean = true\r\n    ):Promise<void>  => {\r\n        let fullOptions:AxiosRequestConfig<any> = {\r\n            ...options,\r\n            responseType: 'blob'\r\n        };\r\n        let requestQueueItem = await this.createRequest(url, null, fullOptions, authentication)\r\n\r\n        try {\r\n            let response = await this.axiosInstance.get(requestQueueItem.url, requestQueueItem.axiosConfig)\r\n            this.doBrowserDownload(response)\r\n        }\r\n        catch(e:any) {\r\n            if(e instanceof Error || e instanceof AxiosError) {\r\n                await this.apiErrorCatch(e)\r\n            }\r\n            throw e\r\n        }\r\n    }\r\n\r\n    private doBrowserDownload = (response:AxiosResponse):void => {\r\n        let downloadUrl = window.URL.createObjectURL(new Blob([response.data]));\r\n        let link = document.createElement('a');\r\n        link.href = downloadUrl;\r\n        let fileName = 'file';\r\n        if (response.headers['content-disposition']) {\r\n            let fileNameMatch = response.headers['content-disposition'].match(/filename=(.+)/);\r\n            if (fileNameMatch && fileNameMatch.length === 2) {\r\n                fileName = fileNameMatch[1].replaceAll(/[\"']/gi, '');\r\n            } else if (fileNameMatch && fileNameMatch.length === 1) {\r\n                fileName = fileNameMatch[0].replaceAll(/[\"']/gi, '');\r\n            }\r\n        }\r\n        link.setAttribute('download', fileName);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        link.remove();\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    upload = async (\r\n        url:string,\r\n        files:Array<File>,\r\n        options:AxiosRequestConfig<any> = {},\r\n        authentication:boolean = true\r\n    ) => {\r\n\r\n        let formData = new FormData();\r\n        for (let i = 0; i < files.length; i++) {\r\n            formData.append('file[' + i + ']', files[i]);\r\n        }\r\n\r\n        let requestQueueItem = await this.createRequest(url, formData, options, authentication)\r\n\r\n        try {\r\n            return this.axiosInstance.post(requestQueueItem.url, formData, requestQueueItem.axiosConfig)\r\n        }\r\n        catch(e:any) {\r\n            if(e instanceof Error || e instanceof AxiosError) {\r\n                await this.apiErrorCatch(e)\r\n            }\r\n            throw e\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default ApiService;\r\nexport {ApiConfig, ApiError, ApiAuthError, ApiAdvancedResponse, ApiRequestQueueItem}\r\n","class ApiError extends Error {\r\n    public code: number = 0\r\n    public data: any = {}\r\n    public guid: string = ''\r\n\r\n    constructor(\r\n        message: string,\r\n        code: number = 0,\r\n        data: any = {},\r\n        guid: string = ''\r\n    ) {\r\n        // Pass remaining arguments (including vendor specific ones) to parent constructor\r\n        super(message)\r\n\r\n        this.name = this.constructor.name;\r\n\r\n        // Maintains proper stack trace for where our error was thrown (only available on V8)\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ApiError)\r\n        }\r\n\r\n        // Custom debugging information\r\n        this.code = code\r\n        this.data = data\r\n        this.guid = guid\r\n    }\r\n}\r\n\r\nexport default ApiError;\r\n","import ApiError from \"./ApiError\";\r\n\r\nclass ApiAuthError\r\n\textends ApiError {\r\n\tconstructor(message:string, code:number=0, data:any={}, guid:string='') {\r\n\t\t// Pass remaining arguments (including vendor specific ones) to parent constructor\r\n\t\tsuper(message, code, data, guid)\r\n\r\n\t}\r\n}\r\nexport default ApiAuthError;\r\n","class ApiConfig {\r\n    public baseUrl:string\r\n    public baseUrlParams:string\r\n    public useAuthentication:boolean\r\n    public getAccessTokenFn:()=>Promise<string>\r\n\r\n\tconstructor( baseUrl:string, baseUrlParams:string, useAuthentication:boolean, getAccessTokenFn=async():Promise<string>=>{return ''} ) {\r\n\t\tthis.baseUrl = baseUrl\r\n\t\tthis.baseUrlParams = baseUrlParams\r\n\t\tthis.useAuthentication = useAuthentication\r\n\t\tthis.getAccessTokenFn = getAccessTokenFn //async function\r\n\t}\r\n}\r\nexport default ApiConfig;\r\n","import {AxiosRequestConfig} from \"axios\";\n\nclass ApiRequestQueueItem {\n    public id: string\n    public created: Date\n    public url: string\n    public data: any\n    public axiosConfig: AxiosRequestConfig\n    public abortController: AbortController\n    public authentication: boolean\n\n\n    constructor(\n        id: string = crypto.randomUUID(),\n        url: string = '',\n        data: any = null,\n        axiosConfig: AxiosRequestConfig = {},\n        abortController: AbortController = new AbortController(),\n        authentication: boolean = true\n    ) {\n        this.id = id\n        this.created = new Date()\n        this.url = url\n        this.data = data\n        this.authentication = authentication\n        this.axiosConfig = axiosConfig\n        this.abortController = abortController\n    }\n}\n\nexport default ApiRequestQueueItem;\n","import ApiRequestQueueItem from \"./ApiRequestQueueItem\";\nimport {AxiosResponse} from \"axios\";\n\nclass ApiAdvancedResponse {\n    public id: string\n    public response: Promise<AxiosResponse<any>>\n\n    constructor(\n        requestQueueItem: ApiRequestQueueItem,\n        response: Promise<AxiosResponse<any>>\n    ) {\n        this.id = requestQueueItem.id\n        this.response = response\n    }\n}\n\nexport default ApiAdvancedResponse;\n"],"mappings":"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","names":["axios","_"]}