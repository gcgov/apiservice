{"version":3,"sources":["../src/ApiError.ts","../src/ApiAuthError.ts","../src/ApiConfig.ts","../src/ApiRequestQueueItem.ts","../src/ApiAdvancedResponse.ts","../src/ApiService.ts","../src/ApiFetchError.ts","../src/ApiServerDataTable.ts"],"sourcesContent":["class ApiError extends Error {\r\n    public code: number|string = 0\r\n    public data: any = {}\r\n    public guid: string = ''\r\n\r\n    constructor(\r\n        message: string,\r\n        code: number|string = 0,\r\n        data: any = {},\r\n        guid: string = ''\r\n    ) {\r\n        // Pass remaining arguments (including vendor specific ones) to parent constructor\r\n        super(message)\r\n\r\n        this.name = this.constructor.name;\r\n\r\n        // Maintains proper stack trace for where our error was thrown (only available on V8)\r\n        // @ts-expect-error v8 only\r\n        if (Error.captureStackTrace) {\r\n            // @ts-expect-error v8 only\r\n            Error.captureStackTrace(this, ApiError)\r\n        }\r\n\r\n        // Custom debugging information\r\n        this.code = code\r\n        this.data = data\r\n        this.guid = guid\r\n    }\r\n}\r\n\r\nexport default ApiError;\r\n","import ApiError from \"./ApiError\";\r\n\r\nclass ApiAuthError\r\n\textends ApiError {\r\n\tconstructor(message:string, code:number=0, data:any={}, guid:string='') {\r\n\t\t// Pass remaining arguments (including vendor specific ones) to parent constructor\r\n\t\tsuper(message, code, data, guid)\r\n\r\n\t}\r\n}\r\nexport default ApiAuthError;\r\n","class ApiConfig {\r\n    public baseUrl:string\r\n    public baseUrlParams:string\r\n    public useAuthentication:boolean\r\n    public getAccessTokenFn:()=>Promise<string>\r\n\r\n\tconstructor( baseUrl:string, baseUrlParams:string, useAuthentication:boolean, getAccessTokenFn=async():Promise<string>=>{return ''} ) {\r\n\t\tthis.baseUrl = baseUrl\r\n\t\tthis.baseUrlParams = baseUrlParams\r\n\t\tthis.useAuthentication = useAuthentication\r\n\t\tthis.getAccessTokenFn = getAccessTokenFn //async function\r\n\t}\r\n}\r\nexport default ApiConfig;\r\n","class ApiRequestQueueItem {\n    public id: string\n    public created: Date\n    public url: string\n    public data: any\n    public config: RequestInit\n    public abortController: AbortController\n    public authentication: boolean\n\n\n    constructor(\n        id: string = crypto.randomUUID(),\n        url: string = '',\n        data: any = null,\n        config: RequestInit = {},\n        abortController: AbortController = new AbortController(),\n        authentication: boolean = true\n    ) {\n        this.id = id\n        this.created = new Date()\n        this.url = url\n        this.data = data\n        this.authentication = authentication\n        this.config = config\n        this.abortController = abortController\n    }\n}\n\nexport default ApiRequestQueueItem;\n","import ApiRequestQueueItem from \"./ApiRequestQueueItem\";\n\nclass ApiAdvancedResponse {\n    public id: string\n    public response: Promise<Response>\n\n    constructor(\n        requestQueueItem: ApiRequestQueueItem,\n        response: Promise<Response>\n    ) {\n        this.id = requestQueueItem.id\n        this.response = response\n    }\n}\n\nexport default ApiAdvancedResponse;\n","import ApiError from \"./ApiError\";\r\nimport ApiAuthError from \"./ApiAuthError\";\r\nimport ApiConfig from \"./ApiConfig\";\r\nimport ApiRequestQueueItem from \"./ApiRequestQueueItem\";\r\nimport ApiAdvancedResponse from \"./ApiAdvancedResponse\";\r\nimport {isArray, trimEnd} from \"lodash\"\r\nimport ApiFetchError from \"./ApiFetchError\";\r\nimport {ServerDataTable} from \"./ApiServerDataTable\"\r\n\r\nclass ApiService {\r\n\r\n    private readonly serviceId: string = ''\r\n\r\n    public config: ApiConfig\r\n\r\n    private requestsQueue: { [key: string]: ApiRequestQueueItem } = {}\r\n\r\n    /**\r\n     *\r\n     * @param {ApiConfig} apiConfig\r\n     */\r\n    constructor(apiConfig: ApiConfig) {\r\n        this.serviceId = crypto.randomUUID()\r\n        this.config = apiConfig\r\n\r\n        console.log('Constructed ApiService #' + this.serviceId + ' for base url ' + apiConfig.baseUrl);\r\n    }\r\n\r\n    private createRequest = async (\r\n        method: string,\r\n        urlPath: string,\r\n        data: any = null,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<ApiRequestQueueItem> => {\r\n\r\n        const fullUrl: string = this.buildUrl(urlPath)\r\n\r\n        const abortController: AbortController = new AbortController()\r\n\r\n        const requestId: string = crypto.randomUUID()\r\n\r\n        const config: RequestInit = await this.buildConfig(method, options, data, abortController, authentication, requestId)\r\n\r\n        this.requestsQueue[requestId] = new ApiRequestQueueItem(requestId, fullUrl, data, config, abortController, authentication)\r\n\r\n        return this.requestsQueue[requestId]\r\n    }\r\n\r\n    public buildUrl(urlPath: string): string {\r\n        if (urlPath.substring(0, 4) === 'http') {\r\n            return urlPath;\r\n        }\r\n\r\n        let cleanUrlPath = urlPath.replace(/^\\/+|\\/+$/g, '');\r\n        let append = '';\r\n        if (this.config.baseUrlParams !== '') {\r\n            append = '?';\r\n            if (cleanUrlPath.indexOf('?') > -1) {\r\n                append = '&';\r\n            }\r\n            append += this.config.baseUrlParams;\r\n        }\r\n\r\n        return trimEnd(this.config.baseUrl, '/') + '/' + cleanUrlPath + append;\r\n    }\r\n\r\n    public buildConfig = async (\r\n        method: string = 'GET',\r\n        options: RequestInit = {},\r\n        data: any = null,\r\n        abortController: AbortController | null = null,\r\n        authentication: boolean = true,\r\n        requestId: string = crypto.randomUUID()\r\n    ): Promise<RequestInit> => {\r\n\r\n\r\n        let config = {\r\n            ...options\r\n        };\r\n\r\n        //add method\r\n        config.method = method\r\n\r\n        //add abort handler\r\n        if (abortController instanceof AbortController) {\r\n            config.signal = abortController.signal\r\n        }\r\n\r\n        //standardize headers into Headers object\r\n        if (config.headers == undefined) {\r\n            config.headers = new Headers();\r\n        } else if (!(config.headers instanceof Headers)) {\r\n            const requestHeaders = new Headers();\r\n            if (isArray(config.headers)) {\r\n                for (let i = 0; i < config.headers.length; i++) {\r\n                    requestHeaders.set(config.headers[i][0], config.headers[i][1])\r\n                }\r\n            } else {\r\n                for (const key in config.headers) {\r\n                    requestHeaders.set(key, config.headers[key])\r\n                }\r\n            }\r\n            config.headers = requestHeaders\r\n        }\r\n\r\n        config.headers.set('X-Request-Id', requestId)\r\n\r\n        //add auth\r\n        if (authentication) {\r\n            //get access token\r\n            let accessToken = await this.config.getAccessTokenFn();\r\n            if (accessToken === '' || accessToken === null) {\r\n                console.log('empty access token');\r\n                throw new ApiAuthError('Authentication failed', 401)\r\n            }\r\n\r\n            config.headers.set('Authorization', 'Bearer ' + accessToken)\r\n        }\r\n\r\n        //add data to body\r\n        if (data instanceof FormData) {\r\n            config.body = data\r\n        } else if (data !== null) {\r\n            config.body = JSON.stringify(data)\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * Standardize error reporting up the stack to our ApiError\r\n     * @param {Error} e\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    private apiErrorCatch = async (e: any): Promise<void> => {\r\n        console.log(e)\r\n        const response = e?.response\r\n        const request = e?.request\r\n\r\n        if (e.code === 'ERR_NETWORK') {\r\n            throw new ApiError('Network connection problem', '1001')\r\n        } else if (e.code === 'ERR_CANCELED') {\r\n            throw new ApiError('Request cancelled', '1000')\r\n        }\r\n\r\n        if (response) {\r\n            if (response.headers && response.headers.get('Content-Type').includes('application/json')) {\r\n                response.data = await response.json()\r\n            }\r\n        }\r\n\r\n        //pretty error from API\r\n        if (response && response.data && response.data.message) {\r\n            throw new ApiError(response.data.message, response.status, response.data);\r\n        }\r\n        //standard 400, 404, 500, etc error\r\n        else if (response && response.status) {\r\n            throw new ApiError(e.message, response.status);\r\n        }\r\n        //if it is a blob (file download)\r\n        else if (request && response && request.responseType === 'blob' && response.data instanceof Blob && response.data.type && response.data.type.toLowerCase().includes('json')) {\r\n            let resolvedResponse = JSON.parse(await response.data.text());\r\n            if (resolvedResponse.message && resolvedResponse.status && resolvedResponse.data) {\r\n                throw new ApiError(resolvedResponse.message, resolvedResponse.status, resolvedResponse.data);\r\n            } else if (resolvedResponse.message && resolvedResponse.data) {\r\n                throw new ApiError(resolvedResponse.message, response.status, resolvedResponse.data);\r\n            }\r\n        }\r\n\r\n        throw new ApiError('Unrecoverable error in local API service')\r\n    }\r\n\r\n    cancelRequests = async (requestIds: string[] = []): Promise<void> => {\r\n        //console.log('cancel requests')\r\n        //console.log(requestIds)\r\n        for (let i in requestIds) {\r\n            let requestId = requestIds[i]\r\n            if (this.requestsQueue[requestId]) {\r\n                if (this.requestsQueue[requestId] && this.requestsQueue[requestId].abortController instanceof AbortController) {\r\n                    this.requestsQueue[requestId].abortController.abort()\r\n                }\r\n                delete this.requestsQueue[requestId]\r\n            }\r\n        }\r\n    }\r\n\r\n    cancelRequest = async (requestId: string = ''): Promise<void> => {\r\n        await this.cancelRequests([requestId])\r\n    }\r\n\r\n\r\n    cancelAll = async (): Promise<void> => {\r\n        await this.cancelRequests(Object.keys(this.requestsQueue))\r\n    }\r\n\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    getAdv = async (\r\n        url: string,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<ApiAdvancedResponse> => {\r\n        const requestQueueItem: ApiRequestQueueItem = await this.createRequest('GET', url, null, options, authentication)\r\n\r\n        const request = new Request(requestQueueItem.url, requestQueueItem.config);\r\n\r\n        const responsePromise: Promise<Response> = fetch(request).then((response) => {\r\n            if (response.ok) {\r\n                return response\r\n            } else {\r\n                throw new ApiFetchError(response.status + ' ' + response.statusText, response.status, request, response, {}, '22914417719b4809826c9d014fd2a978')\r\n            }\r\n        }).catch(async (e) => {\r\n            await this.apiErrorCatch(e);\r\n            throw e;\r\n        })\r\n        return new ApiAdvancedResponse(requestQueueItem, responsePromise);\r\n    }\r\n\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    get = async (\r\n        url: string,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<Response> => {\r\n        const advResponse: ApiAdvancedResponse = await this.getAdv(url, options, authentication)\r\n        return advResponse.response;\r\n    }\r\n\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    getAllPaged = async <T>(\r\n        url: string,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true,\r\n        page: number = 1,\r\n        itemsPerPage: number = 100,\r\n        collection: Array<T> = []\r\n    ): Promise<Array<T>> => {\r\n        const advResponse: ApiAdvancedResponse = await this.getAdv(url, options, authentication)\r\n\r\n        const apiResponse = await advResponse.response\r\n        const apiResponseData: Array<T> = await apiResponse.json()\r\n\r\n        const pageCount: number = parseInt(apiResponse.headers.get('X-Page-Count') ?? '0')\r\n\r\n        //set data\r\n        collection.push(...apiResponseData)\r\n\r\n        //loop\r\n        if (pageCount > page) {\r\n            return await this.getAllPaged(url, options, authentication, page + 1, itemsPerPage, collection)\r\n        }\r\n\r\n        return collection;\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    postAdv = async (\r\n        url: string,\r\n        data: any,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<ApiAdvancedResponse> => {\r\n        let requestQueueItem = await this.createRequest('POST', url, data, options, authentication)\r\n\r\n        const request = new Request(requestQueueItem.url, requestQueueItem.config);\r\n\r\n        const responsePromise: Promise<Response> = fetch(request).then((response) => {\r\n            if (response.ok) {\r\n                return response\r\n            } else {\r\n                throw new ApiFetchError(response.status + ' ' + response.statusText, response.status, request, response, {}, '9517f34da9cc4930a5aa3c60fed3eb8e')\r\n            }\r\n        }).catch(async (e) => {\r\n            await this.apiErrorCatch(e);\r\n            throw e;\r\n        });\r\n\r\n        return new ApiAdvancedResponse(requestQueueItem, responsePromise);\r\n\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    post = async (\r\n        url: string,\r\n        data: any,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<Response> => {\r\n        let advResponse = await this.postAdv(url, data, options, authentication)\r\n        return advResponse.response;\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    postForm = async (\r\n        url: string,\r\n        data: any,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<Response> => {\r\n        let requestQueueItem = await this.createRequest('POST', url, data, options, authentication)\r\n        //@ts-ignore - requestQueueItem.config.headers is always set to be a Headers() object\r\n        requestQueueItem.config.headers.set('Content-Type', 'multipart/form-data')\r\n        return fetch(requestQueueItem.url, requestQueueItem.config).catch(async (e) => {\r\n            await this.apiErrorCatch(e);\r\n            throw e;\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    put = async (\r\n        url: string,\r\n        data: any,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<Response> => {\r\n        let requestQueueItem = await this.createRequest('PUT', url, data, options, authentication)\r\n        return fetch(requestQueueItem.url, requestQueueItem.config).catch(async (e) => {\r\n            await this.apiErrorCatch(e);\r\n            throw e;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    delete = async (\r\n        url: string,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<Response> => {\r\n        let requestQueueItem = await this.createRequest('DELETE', url, null, options, authentication)\r\n        return fetch(requestQueueItem.url, requestQueueItem.config).catch(async (e) => {\r\n            await this.apiErrorCatch(e);\r\n            throw e;\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    postDownload = async (\r\n        url: string,\r\n        data: any,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<void> => {\r\n        /*let fullOptions: RequestInit = {\r\n            ...options,\r\n            responseType: 'blob'\r\n        };*/\r\n\r\n        let requestQueueItem = await this.createRequest('POST', url, data, options, authentication)\r\n        let response: Response = await fetch(requestQueueItem.url, requestQueueItem.config).catch(async (e) => {\r\n            await this.apiErrorCatch(e);\r\n            throw e;\r\n        })\r\n        await this.doBrowserDownload(response)\r\n    }\r\n\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    getDownload = async (\r\n        url: string,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<void> => {\r\n        /*let fullOptions: RequestInit = {\r\n            ...options,\r\n            responseType: 'blob'\r\n        };*/\r\n        let requestQueueItem = await this.createRequest('GET', url, null, options, authentication)\r\n        let response = await fetch(requestQueueItem.url, requestQueueItem.config).catch(async (e) => {\r\n            await this.apiErrorCatch(e);\r\n            throw e;\r\n        })\r\n        await this.doBrowserDownload(response)\r\n    }\r\n\r\n    private doBrowserDownload = async (response: Response): Promise<void> => {\r\n        const blobContent = await response.blob()\r\n        let downloadUrl = window.URL.createObjectURL(blobContent);\r\n        let link = document.createElement('a');\r\n        link.href = downloadUrl;\r\n        let fileName = 'file';\r\n        let headerValue = response.headers.get('content-disposition')\r\n        if (headerValue) {\r\n            let fileNameMatch = headerValue.match(/filename=(.+)/);\r\n            if (fileNameMatch && fileNameMatch.length === 2) {\r\n                fileName = fileNameMatch[1].replaceAll(/[\"']/gi, '');\r\n            } else if (fileNameMatch && fileNameMatch.length === 1) {\r\n                fileName = fileNameMatch[0].replaceAll(/[\"']/gi, '');\r\n            }\r\n        }\r\n        link.setAttribute('download', fileName);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        link.remove();\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    upload = async (\r\n        url: string,\r\n        files: Array<File>,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ) => {\r\n\r\n        let formData = new FormData();\r\n        for (let i = 0; i < files.length; i++) {\r\n            formData.append('file[' + i + ']', files[i]);\r\n        }\r\n\r\n        let requestQueueItem = await this.createRequest('POST', url, formData, options, authentication)\r\n        return fetch(requestQueueItem.url, requestQueueItem.config).catch(async (e) => {\r\n            await this.apiErrorCatch(e);\r\n            throw e;\r\n        })\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default ApiService;\r\nexport {ApiConfig, ApiError, ApiAuthError, ApiAdvancedResponse, ApiRequestQueueItem, ServerDataTable}\r\nexport {\r\n    type IServerDataTableSortGroup, type IServerDataTableOptions, type TServerDataTableFilters\r\n} from \"./ApiServerDataTable\"\r\n","class ApiError extends Error {\r\n    public code: number|string = 0\r\n    public data: any = {}\r\n    public request: Request|undefined = undefined\r\n    public response: Response|undefined = undefined\r\n    public guid: string = ''\r\n\r\n    constructor(\r\n        message: string,\r\n        code: number|string = 0,\r\n        request: Request|undefined = undefined,\r\n        response: Response|undefined = undefined,\r\n        data: any = {},\r\n        guid: string = ''\r\n    ) {\r\n        // Pass remaining arguments (including vendor specific ones) to parent constructor\r\n        super(message)\r\n\r\n        this.name = this.constructor.name;\r\n\r\n        // Maintains proper stack trace for where our error was thrown (only available on V8)\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ApiError)\r\n        }\r\n\r\n        // Custom debugging information\r\n        this.code = code\r\n        this.data = data\r\n        this.request = request\r\n        this.response = response\r\n        this.guid = guid\r\n    }\r\n}\r\n\r\nexport default ApiError;\r\n","import {cloneDeep, debounce, intersection, upperCase} from \"lodash\";\r\nimport ApiAdvancedResponse from \"./ApiAdvancedResponse\";\r\nimport ApiError from \"./ApiError\";\r\nimport ApiService from \"./ApiService\";\r\nimport {EntityTable, IDType} from \"dexie\";\r\nimport {Ref, ref} from \"vue\";\r\n\r\nexport class UiStateError {\r\n    error: boolean = false;\r\n    errorCode: string | number = '';\r\n    errorMessage: string = '';\r\n\r\n    reset: () => void = (): void => {\r\n        this.error = false;\r\n        this.errorCode = '';\r\n        this.errorMessage = '';\r\n    }\r\n}\r\n\r\nexport class UiState {\r\n    loading: boolean = false;\r\n    loadDialog: boolean = false;\r\n    loadingError: UiStateError = new UiStateError();\r\n}\r\n\r\nexport interface IServerDataTableSortGroup {\r\n    key: string,\r\n    order?: boolean | 'asc' | 'desc'\r\n}\r\n\r\nexport type TServerDataTableFilters = Record<string, string | string[] | undefined | null>\r\n\r\nexport interface IServerDataTableOptions {\r\n    filters?: TServerDataTableFilters | undefined,\r\n    page?: number | undefined,\r\n    itemsPerPage?: number | undefined,\r\n    sortBy?: IServerDataTableSortGroup[] | undefined,\r\n    groupBy?: IServerDataTableSortGroup[] | undefined\r\n}\r\n\r\nexport interface IServerDataTableIndex {\r\n    ids: string[],\r\n    totalItems: number\r\n}\r\n\r\nexport class ServerDataTable<T extends { _id: string }> {\r\n    //ui\r\n    public ui: Ref<UiState> = ref(new UiState())\r\n\r\n    //api/db\r\n    private localStorageKey: string = ''\r\n    private baseUrl: string = ''\r\n    private appApiService: ApiService\r\n    private table: EntityTable<T, '_id'>\r\n\r\n    //table\r\n    public itemsPerPage: Ref<number> = ref(100)\r\n    public page: Ref<number> = ref(1)\r\n    public totalItems: Ref<number> = ref(0)\r\n    public sortBy: Ref<IServerDataTableSortGroup[]> = ref([])\r\n    public groupBy: Ref<IServerDataTableSortGroup[]> = ref([])\r\n    public filters: Ref<TServerDataTableFilters | undefined> = ref(undefined)\r\n\r\n    private defaultItemsPerPage: number = 100\r\n    private defaultPage: number = 1\r\n    private defaultSortBy: IServerDataTableSortGroup[] = []\r\n    private defaultGroupBy: IServerDataTableSortGroup[] = []\r\n    private defaultFilters: TServerDataTableFilters | undefined = undefined\r\n\r\n    //indexing\r\n    private tableIndexes: Record<string, IServerDataTableIndex> = {}\r\n    private currentTableIndexKey: string | undefined = undefined\r\n    public currentItems: Ref<T[]> = ref([])\r\n\r\n    /**\r\n     *\r\n     * @param id\r\n     * @param baseUrl\r\n     * @param appApiService\r\n     * @param table\r\n     * @param defaultOptions\r\n     * @param loadFromStorage optional - false by default. If true, will load current values from storage if available and use the values from defaultOptions if not.\r\n     */\r\n    constructor(id: string, baseUrl: string, appApiService: ApiService, table: EntityTable<T, '_id'>, defaultOptions: IServerDataTableOptions | undefined = undefined, loadFromStorage: boolean = true) {\r\n        this.ui = ref(new UiState())\r\n\r\n        this.localStorageKey = upperCase(id)\r\n        this.baseUrl = baseUrl\r\n        this.appApiService = appApiService\r\n        this.table = table\r\n\r\n        if (defaultOptions && defaultOptions.sortBy) {\r\n            this.defaultSortBy = cloneDeep(defaultOptions.sortBy)\r\n        }\r\n        if (defaultOptions && defaultOptions.groupBy) {\r\n            this.defaultGroupBy = cloneDeep(defaultOptions.groupBy)\r\n        }\r\n        if (defaultOptions && defaultOptions.filters) {\r\n            this.defaultFilters = cloneDeep(defaultOptions.filters)\r\n        }\r\n        if (defaultOptions && defaultOptions.itemsPerPage) {\r\n            this.defaultItemsPerPage = defaultOptions.itemsPerPage\r\n        }\r\n\r\n        if (loadFromStorage && defaultOptions) {\r\n            const optionsStr = localStorage.getItem(this.localStorageKey)\r\n            if (optionsStr == null) {\r\n                return\r\n            }\r\n            const storedOptions = JSON.parse(optionsStr)\r\n\r\n            this.filters.value = storedOptions.filters ?? cloneDeep(this.defaultFilters)\r\n            this.itemsPerPage.value = storedOptions.itemsPerPage ?? cloneDeep(this.defaultItemsPerPage)\r\n            this.sortBy.value = storedOptions.sortBy ?? cloneDeep(this.defaultSortBy)\r\n            this.groupBy.value = storedOptions.groupBy ?? cloneDeep(this.defaultGroupBy)\r\n        } else {\r\n            if (defaultOptions && defaultOptions.sortBy) {\r\n                this.sortBy.value = defaultOptions.sortBy\r\n            }\r\n            if (defaultOptions && defaultOptions.groupBy) {\r\n                this.groupBy.value = defaultOptions.groupBy\r\n            }\r\n            if (defaultOptions && defaultOptions.filters) {\r\n                this.filters.value = cloneDeep(defaultOptions.filters)\r\n            }\r\n            if (defaultOptions && defaultOptions.itemsPerPage) {\r\n                this.itemsPerPage.value = defaultOptions.itemsPerPage\r\n            }\r\n            if (defaultOptions && defaultOptions.page) {\r\n                this.page.value = defaultOptions.page\r\n            }\r\n        }\r\n\r\n        this.persistInStorage()\r\n\r\n    }\r\n\r\n    public log = (message: string): void => {\r\n        console.log(this.baseUrl + ': ' + message)\r\n    }\r\n\r\n    public updateValues = async (options: IServerDataTableOptions) => {\r\n        console.log('update table values')\r\n\r\n        if (options.itemsPerPage) {\r\n            console.log('items per page not equal')\r\n            this.itemsPerPage.value = options.itemsPerPage\r\n        }\r\n        if (options.page) {\r\n            console.log('page not equal')\r\n            this.page.value = options.page\r\n        }\r\n        if (options.filters) {\r\n            console.log('filters not equal')\r\n            this.filters.value = cloneDeep(options.filters)\r\n        }\r\n        if (options.sortBy) {\r\n            console.log('sort by not equal')\r\n            this.sortBy.value = options.sortBy\r\n        }\r\n        if (options.groupBy) {\r\n            console.log('group by not equal')\r\n            this.groupBy.value = options.groupBy\r\n        }\r\n\r\n        this.persistInStorage()\r\n        console.log('get - options not equal')\r\n        await this.getForTable()\r\n    }\r\n\r\n    public updateValuesDebounced = debounce(this.updateValues, 1000)\r\n\r\n    public getForTable = async (forceFromServer: boolean = false): Promise<Array<T>> => {\r\n        //ui\r\n        this.ui.value.loadingError.reset()\r\n        this.ui.value.loading = true\r\n\r\n        //create index key\r\n        this.currentTableIndexKey = this.getUrl()\r\n        const indexKey: string = this.currentTableIndexKey\r\n\r\n        //if in-memory index exists, return indexed items from db for the index\r\n        if (this.tableIndexes[indexKey]?.totalItems > 0 && !forceFromServer) {\r\n            console.log('return index from memory and items from db')\r\n            this.totalItems.value = this.tableIndexes[indexKey].totalItems\r\n            this.currentItems.value = await this.table.where('_id').anyOf(this.tableIndexes[indexKey].ids).toArray()\r\n\r\n            this.ui.value.loading = false\r\n\r\n            return this.currentItems.value\r\n        }\r\n\r\n        console.log(navigator.onLine)\r\n\r\n        //if system is offline, do pagination from dexie\r\n        if (!navigator.onLine) {\r\n            console.log('offline - get paginated items from db')\r\n            this.currentItems.value = await this.getForTableFromDb()\r\n\r\n            this.ui.value.loading = false\r\n            return this.currentItems.value\r\n        }\r\n\r\n        //get from api\r\n        //api get for table method\r\n        try {\r\n            const apiUrl = this.getUrl()\r\n\r\n            console.log('get for table')\r\n            const apiAdvResponse: ApiAdvancedResponse = await this.appApiService.getAdv(apiUrl)\r\n\r\n            console.log('await api response')\r\n            const apiResponse = await apiAdvResponse.response\r\n\r\n            console.log('parse api response')\r\n            this.currentItems.value = await apiResponse.json()\r\n\r\n            //store in db\r\n            console.log('save items to db')\r\n\r\n            this.table.bulkPut(cloneDeep(this.currentItems.value))\r\n\r\n            //create index\r\n            this.totalItems.value = parseInt(apiResponse.headers.get('x-total-count') ?? '0')\r\n            const ids = []\r\n            for (const objectIndex in this.currentItems.value) {\r\n                ids.push(this.currentItems.value[objectIndex]._id)\r\n            }\r\n            this.tableIndexes[indexKey] = {\r\n                ids: ids,\r\n                totalItems: this.totalItems.value\r\n            }\r\n\r\n            //return Array<T>\r\n            return this.currentItems.value\r\n        } catch (e: unknown) {\r\n            this.ui.value.loadingError.error = true\r\n            if (e instanceof Error) {\r\n                this.ui.value.loadingError.errorMessage = e.message\r\n            }\r\n            if (e instanceof ApiError) {\r\n                this.ui.value.loadingError.errorCode = e.code ?? 500\r\n            }\r\n            throw e\r\n        } finally {\r\n            //ui\r\n            this.ui.value.loading = false\r\n        }\r\n\r\n    }\r\n\r\n    private getForTableFromDb = async (): Promise<Array<T>> => {\r\n        //manual pagination - in Dexie 5 this might be able to be simplified/improved\r\n\r\n        let matchingIdPromises: Promise<IDType<T, \"_id\">[]>[] = []\r\n        let filterCount = 0\r\n\r\n        if (this.filters.value) {\r\n            for (const key in this.filters.value) {\r\n                if (this.filters.value[key] === null || this.filters.value[key] === undefined || this.filters.value[key] === '') {\r\n                    continue\r\n                }\r\n\r\n                filterCount++\r\n\r\n                //array\r\n                if (Array.isArray(this.filters.value[key])) {\r\n                    if (this.filters.value[key].length == 0) {\r\n                        continue\r\n                    }\r\n\r\n                    for (const i in this.filters.value[key]) {\r\n                        if (this.filters.value[key][i] === null || this.filters.value[key][i] === undefined || this.filters.value[key][i] === '') {\r\n                            continue\r\n                        }\r\n                        matchingIdPromises.push(this.table.where(key).startsWithIgnoreCase(this.filters.value[key][i]).primaryKeys())\r\n                    }\r\n                }\r\n                //single value\r\n                else {\r\n                    matchingIdPromises.push(this.table.where(key).startsWithIgnoreCase(this.filters.value[key]).primaryKeys())\r\n                }\r\n            }\r\n        }\r\n\r\n        if(filterCount===0) {\r\n            matchingIdPromises.push(this.table.toCollection().primaryKeys())\r\n        }\r\n\r\n        //get ids that match\r\n        let matchingIds: string[] = []\r\n        for(const i in matchingIdPromises) {\r\n            matchingIds.push( ...await matchingIdPromises[i] )\r\n        }\r\n        matchingIds = intersection(matchingIds)\r\n        console.log('matching ids:')\r\n        console.log(matchingIds)\r\n\r\n        //generate order based on first sort category\r\n        let orderByField = ''\r\n        let orderByOrder: boolean | \"asc\" | \"desc\" | undefined = 'asc'\r\n        if (this.sortBy.value.length > 0) {\r\n            orderByField = this.sortBy.value[0].key\r\n            orderByOrder = this.sortBy.value[0].order\r\n        }\r\n\r\n        //get the items limited by page in order\r\n        const promises: Promise<T | undefined>[] = []; // to collect ids sorted by index;\r\n\r\n        // Use a sort index to query data:\r\n        let collection = this.table.toCollection()\r\n        if (orderByField) {\r\n            collection = this.table.orderBy(orderByField)\r\n            if(!orderByOrder || orderByOrder === 'desc') {\r\n                collection.reverse()\r\n            }\r\n        }\r\n\r\n        console.log('start getting')\r\n        await collection\r\n            .until(() => promises.length >= this.itemsPerPage.value)\r\n            .eachPrimaryKey((id: IDType<T, '_id'>) => {\r\n                if (matchingIds.includes(id)) {\r\n                    promises.push(this.table.get(id));\r\n                }\r\n            });\r\n\r\n        const result = await Promise.all(promises);\r\n\r\n        console.log(result)\r\n        console.log('return')\r\n        return result.filter((item) => item !== undefined)\r\n    }\r\n\r\n    public updateFilters = async (filters: TServerDataTableFilters | undefined) => {\r\n        console.log('update filters')\r\n\r\n        //let change = false\r\n        const clonedNewFilters = cloneDeep(filters)\r\n        this.page.value = 1\r\n        this.totalItems.value = 0\r\n        this.filters.value = clonedNewFilters\r\n        this.persistInStorage()\r\n\r\n        await this.getForTable()\r\n    }\r\n\r\n    public updateFiltersDebounced = debounce(this.updateFilters, 1000)\r\n\r\n    public reset = async (): Promise<void> => {\r\n        this.page.value = this.defaultPage\r\n        this.totalItems.value = 0\r\n        this.filters.value = cloneDeep(this.defaultFilters)\r\n        this.sortBy.value = cloneDeep(this.defaultSortBy)\r\n        this.groupBy.value = cloneDeep(this.defaultGroupBy)\r\n        this.itemsPerPage.value = this.defaultItemsPerPage\r\n        await this.updateFilters(this.filters.value)\r\n    }\r\n    public resetFilters = async (): Promise<void> => {\r\n        this.filters.value = cloneDeep(this.defaultFilters)\r\n        await this.updateFilters(this.filters.value)\r\n    }\r\n\r\n    public getUrl = () => {\r\n        const urlParts = []\r\n\r\n        if (this.filters.value) {\r\n            for (const key in this.filters.value) {\r\n                if (this.filters.value[key] === null || this.filters.value[key] === undefined) {\r\n                    continue;\r\n                }\r\n\r\n                if (Array.isArray(this.filters.value[key])) {\r\n                    if (this.filters.value[key].length == 0) {\r\n                        continue\r\n                    }\r\n\r\n                    // @ts-expect-error known to be safe\r\n                    for (const i in this.filters[key]) {\r\n                        if (this.filters.value[key] === null || this.filters.value[key] === undefined) {\r\n                            continue;\r\n                        }\r\n                        // @ts-expect-error known to be safe\r\n                        urlParts.push(key + '[]=' + this.filters.value[key][i])\r\n                    }\r\n                } else {\r\n                    urlParts.push(key + '=' + this.filters.value[key])\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.groupBy.value) {\r\n            for (const groupBy of this.groupBy.value) {\r\n                urlParts.push('groupBy[]=' + groupBy.key + '|' + groupBy.order)\r\n            }\r\n        }\r\n\r\n        if (this.sortBy.value) {\r\n            for (const sortBy of this.sortBy.value) {\r\n                urlParts.push('sortBy[]=' + sortBy.key + '|' + sortBy.order)\r\n            }\r\n        }\r\n\r\n        const urlJoin = this.baseUrl.includes('?') ? '&' : '?';\r\n\r\n        return this.baseUrl + urlJoin + 'limit=' + this.itemsPerPage.value + '&page=' + this.page.value + '&' + urlParts.join('&')\r\n    }\r\n\r\n    public getIndexKey = () => {\r\n        return this.getUrl()\r\n    }\r\n\r\n    public resetIndexing = () => {\r\n        this.tableIndexes = {}\r\n        this.currentTableIndexKey = undefined\r\n    }\r\n\r\n    private persistInStorage = (): void => {\r\n        const value = JSON.stringify({\r\n            filters: this.filters.value,\r\n            defaultFilters: this.defaultFilters,\r\n            itemsPerPage: this.itemsPerPage.value,\r\n            defaultItemsPerPage: this.defaultItemsPerPage,\r\n            sortBy: this.sortBy.value,\r\n            defaultSortBy: this.defaultSortBy,\r\n            groupBy: this.groupBy.value,\r\n            defaultGroupBy: this.defaultGroupBy,\r\n        })\r\n        localStorage.setItem(this.localStorageKey, value)\r\n    }\r\n\r\n\r\n}\r\n"],"mappings":"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","names":["ApiError"]}