{"version":3,"sources":["../src/ApiError.ts","../src/ApiAuthError.ts","../src/ApiConfig.ts","../src/ApiRequestQueueItem.ts","../src/ApiAdvancedResponse.ts","../src/ApiService.ts","../src/ApiFetchError.ts"],"sourcesContent":["class ApiError extends Error {\r\n    public code: number|string = 0\r\n    public data: any = {}\r\n    public guid: string = ''\r\n\r\n    constructor(\r\n        message: string,\r\n        code: number|string = 0,\r\n        data: any = {},\r\n        guid: string = ''\r\n    ) {\r\n        // Pass remaining arguments (including vendor specific ones) to parent constructor\r\n        super(message)\r\n\r\n        this.name = this.constructor.name;\r\n\r\n        // Maintains proper stack trace for where our error was thrown (only available on V8)\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ApiError)\r\n        }\r\n\r\n        // Custom debugging information\r\n        this.code = code\r\n        this.data = data\r\n        this.guid = guid\r\n    }\r\n}\r\n\r\nexport default ApiError;\r\n","import ApiError from \"./ApiError\";\r\n\r\nclass ApiAuthError\r\n\textends ApiError {\r\n\tconstructor(message:string, code:number=0, data:any={}, guid:string='') {\r\n\t\t// Pass remaining arguments (including vendor specific ones) to parent constructor\r\n\t\tsuper(message, code, data, guid)\r\n\r\n\t}\r\n}\r\nexport default ApiAuthError;\r\n","class ApiConfig {\r\n    public baseUrl:string\r\n    public baseUrlParams:string\r\n    public useAuthentication:boolean\r\n    public getAccessTokenFn:()=>Promise<string>\r\n\r\n\tconstructor( baseUrl:string, baseUrlParams:string, useAuthentication:boolean, getAccessTokenFn=async():Promise<string>=>{return ''} ) {\r\n\t\tthis.baseUrl = baseUrl\r\n\t\tthis.baseUrlParams = baseUrlParams\r\n\t\tthis.useAuthentication = useAuthentication\r\n\t\tthis.getAccessTokenFn = getAccessTokenFn //async function\r\n\t}\r\n}\r\nexport default ApiConfig;\r\n","import {AxiosRequestConfig} from \"axios\";\n\nclass ApiRequestQueueItem {\n    public id: string\n    public created: Date\n    public url: string\n    public data: any\n    public config: RequestInit\n    public abortController: AbortController\n    public authentication: boolean\n\n\n    constructor(\n        id: string = crypto.randomUUID(),\n        url: string = '',\n        data: any = null,\n        config: RequestInit = {},\n        abortController: AbortController = new AbortController(),\n        authentication: boolean = true\n    ) {\n        this.id = id\n        this.created = new Date()\n        this.url = url\n        this.data = data\n        this.authentication = authentication\n        this.config = config\n        this.abortController = abortController\n    }\n}\n\nexport default ApiRequestQueueItem;\n","import ApiRequestQueueItem from \"./ApiRequestQueueItem\";\n\nclass ApiAdvancedResponse {\n    public id: string\n    public response: Promise<Response>\n\n    constructor(\n        requestQueueItem: ApiRequestQueueItem,\n        response: Promise<Response>\n    ) {\n        this.id = requestQueueItem.id\n        this.response = response\n    }\n}\n\nexport default ApiAdvancedResponse;\n","import ApiError from \"./ApiError\";\r\nimport ApiAuthError from \"./ApiAuthError\";\r\n// eslint-disable-next-line\r\nimport ApiConfig from \"./ApiConfig\";\r\nimport ApiRequestQueueItem from \"./ApiRequestQueueItem\";\r\nimport ApiAdvancedResponse from \"./ApiAdvancedResponse\";\r\nimport {trimEnd, isEmpty, isArray, isNumber} from \"lodash\"\r\nimport ApiFetchError from \"./ApiFetchError\";\r\n\r\nclass ApiService {\r\n\r\n    private readonly serviceId: string = ''\r\n\r\n    public config: ApiConfig\r\n\r\n    private requestsQueue: { [key: string]: ApiRequestQueueItem } = {}\r\n\r\n    /**\r\n     *\r\n     * @param {ApiConfig} apiConfig\r\n     */\r\n    constructor(apiConfig: ApiConfig) {\r\n        this.serviceId = crypto.randomUUID()\r\n        this.config = apiConfig\r\n\r\n        console.log('Constructed ApiService #' + this.serviceId + ' for base url ' + apiConfig.baseUrl);\r\n    }\r\n\r\n    private createRequest = async (\r\n        method: string,\r\n        urlPath: string,\r\n        data: any = null,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<ApiRequestQueueItem> => {\r\n\r\n        const fullUrl: string = this.buildUrl(urlPath)\r\n\r\n        const abortController: AbortController = new AbortController()\r\n\r\n        const requestId: string = crypto.randomUUID()\r\n\r\n        const config: RequestInit = await this.buildConfig(method, options, data, abortController, authentication, requestId)\r\n\r\n        this.requestsQueue[requestId] = new ApiRequestQueueItem(requestId, fullUrl, data, config, abortController, authentication)\r\n\r\n        return this.requestsQueue[requestId]\r\n    }\r\n\r\n    public buildUrl(urlPath: string): string {\r\n        if (urlPath.substring(0, 4) === 'http') {\r\n            return urlPath;\r\n        }\r\n\r\n        let cleanUrlPath = urlPath.replace(/^\\/+|\\/+$/g, '');\r\n        let append = '';\r\n        if (this.config.baseUrlParams !== '') {\r\n            append = '?';\r\n            if (cleanUrlPath.indexOf('?') > -1) {\r\n                append = '&';\r\n            }\r\n            append += this.config.baseUrlParams;\r\n        }\r\n\r\n        return trimEnd(this.config.baseUrl, '/') + '/' + cleanUrlPath + append;\r\n    }\r\n\r\n    public buildConfig = async (\r\n        method: string = 'GET',\r\n        options: RequestInit = {},\r\n        data: any = null,\r\n        abortController: AbortController | null = null,\r\n        authentication: boolean = true,\r\n        requestId: string = crypto.randomUUID()\r\n    ): Promise<RequestInit> => {\r\n\r\n\r\n        let config = {\r\n            ...options\r\n        };\r\n\r\n        //add method\r\n        config.method = method\r\n\r\n        //add abort handler\r\n        if (abortController instanceof AbortController) {\r\n            config.signal = abortController.signal\r\n        }\r\n\r\n        //standardize headers into Headers object\r\n        if(config.headers==undefined) {\r\n            config.headers = new Headers();\r\n        }\r\n        else if(!(config.headers instanceof Headers)) {\r\n            const requestHeaders =  new Headers();\r\n            if( isArray(config.headers) ) {\r\n                for(let i=0; i<config.headers.length; i++) {\r\n                    requestHeaders.set( config.headers[i][0], config.headers[i][1] )\r\n                }\r\n            }\r\n            else {\r\n                for(const key in config.headers) {\r\n                    requestHeaders.set( key, config.headers[key] )\r\n                }\r\n            }\r\n            config.headers = requestHeaders\r\n        }\r\n\r\n        config.headers.set('X-Request-Id', requestId)\r\n\r\n        //add auth\r\n        if (authentication) {\r\n            //get access token\r\n            let accessToken = await this.config.getAccessTokenFn();\r\n            if (accessToken === '' || accessToken === null) {\r\n                console.log('empty access token');\r\n                throw new ApiAuthError('Authentication failed', 401)\r\n            }\r\n\r\n            config.headers.set('Authorization', 'Bearer ' + accessToken)\r\n        }\r\n\r\n        //add data to body\r\n        if(data instanceof FormData) {\r\n            config.body = data\r\n        }\r\n        else if(data!==null) {\r\n            config.body = JSON.stringify( data )\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * Standardize error reporting up the stack to our ApiError\r\n     * @param {Error} e\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    private apiErrorCatch = async (e: any): Promise<void> => {\r\n        console.log(e)\r\n        const response = e?.response\r\n        const request = e?.request\r\n\r\n        if (e.code === 'ERR_NETWORK') {\r\n            throw new ApiError('Network connection problem', '1001')\r\n        } else if (e.code === 'ERR_CANCELED') {\r\n            throw new ApiError('Request cancelled', '1000')\r\n        }\r\n\r\n        if (response) {\r\n            if(response.headers && response.headers.get('Content-Type').includes('application/json')) {\r\n                response.data = await response.json()\r\n            }\r\n        }\r\n\r\n        //pretty error from API\r\n        if (response && response.data && response.data.message) {\r\n            throw new ApiError(response.data.message, response.status, response.data);\r\n        }\r\n        //standard 400, 404, 500, etc error\r\n        else if (response && response.status) {\r\n            throw new ApiError(e.message, response.status);\r\n        }\r\n        //if it is a blob (file download)\r\n        else if (request && response && request.responseType === 'blob' && response.data instanceof Blob && response.data.type && response.data.type.toLowerCase().includes('json')) {\r\n            let resolvedResponse = JSON.parse(await response.data.text());\r\n            if (resolvedResponse.message && resolvedResponse.status && resolvedResponse.data) {\r\n                throw new ApiError(resolvedResponse.message, resolvedResponse.status, resolvedResponse.data);\r\n            } else if (resolvedResponse.message && resolvedResponse.data) {\r\n                throw new ApiError(resolvedResponse.message, response.status, resolvedResponse.data);\r\n            }\r\n        }\r\n\r\n        throw new ApiError('Unrecoverable error in local API service')\r\n    }\r\n\r\n    cancelRequests = async (requestIds: string[] = []): Promise<void> => {\r\n        //console.log('cancel requests')\r\n        //console.log(requestIds)\r\n        for (let i in requestIds) {\r\n            let requestId = requestIds[i]\r\n            if (this.requestsQueue[requestId]) {\r\n                if (this.requestsQueue[requestId] && this.requestsQueue[requestId].abortController instanceof AbortController) {\r\n                    this.requestsQueue[requestId].abortController.abort()\r\n                }\r\n                delete this.requestsQueue[requestId]\r\n            }\r\n        }\r\n    }\r\n\r\n    cancelRequest = async (requestId: string = ''): Promise<void> => {\r\n        await this.cancelRequests([requestId])\r\n    }\r\n\r\n\r\n    cancelAll = async (): Promise<void> => {\r\n        await this.cancelRequests(Object.keys(this.requestsQueue))\r\n    }\r\n\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    getAdv = async (\r\n        url: string,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<ApiAdvancedResponse> => {\r\n        const requestQueueItem: ApiRequestQueueItem = await this.createRequest('GET', url, null, options, authentication)\r\n\r\n        const request = new Request(requestQueueItem.url, requestQueueItem.config);\r\n\r\n        const responsePromise:Promise<Response> = fetch(request).then((response)=>{\r\n            if( response.ok ) {\r\n                return response\r\n            }\r\n            else {\r\n                throw new ApiFetchError(response.status+' '+response.statusText, response.status, request, response, {}, '22914417719b4809826c9d014fd2a978')\r\n            }\r\n        }).catch(async (e) => {\r\n            await this.apiErrorCatch(e);\r\n            throw e;\r\n        })\r\n        return new ApiAdvancedResponse(requestQueueItem, responsePromise);\r\n    }\r\n\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    get = async (\r\n        url: string,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<Response> => {\r\n        const advResponse: ApiAdvancedResponse = await this.getAdv(url, options, authentication)\r\n        return advResponse.response;\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    postAdv = async (\r\n        url: string,\r\n        data: any,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<ApiAdvancedResponse> => {\r\n        let requestQueueItem = await this.createRequest('POST', url, data, options, authentication)\r\n\r\n        const request = new Request(requestQueueItem.url, requestQueueItem.config);\r\n\r\n        const responsePromise:Promise<Response> = fetch(request).then((response)=> {\r\n            if (response.ok) {\r\n                return response\r\n            } else {\r\n                throw new ApiFetchError(response.status+' '+response.statusText, response.status, request, response, {}, '9517f34da9cc4930a5aa3c60fed3eb8e')\r\n            }\r\n        }).catch(async (e) => {\r\n            await this.apiErrorCatch(e);\r\n            throw e;\r\n        });\r\n\r\n        return new ApiAdvancedResponse(requestQueueItem, responsePromise);\r\n\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    post = async (\r\n        url: string,\r\n        data: any,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<Response> => {\r\n        let advResponse = await this.postAdv(url, data, options, authentication)\r\n        return advResponse.response;\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    postForm = async (\r\n        url: string,\r\n        data: any,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<Response> => {\r\n        let requestQueueItem = await this.createRequest('POST', url, data, options, authentication)\r\n        //@ts-ignore - requestQueueItem.config.headers is always set to be a Headers() object\r\n        requestQueueItem.config.headers.set('Content-Type', 'multipart/form-data')\r\n        return fetch(requestQueueItem.url, requestQueueItem.config).catch(async (e) => {\r\n            await this.apiErrorCatch(e);\r\n            throw e;\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    put = async (\r\n        url: string,\r\n        data: any,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<Response> => {\r\n        let requestQueueItem = await this.createRequest('PUT', url, data, options, authentication)\r\n        return fetch(requestQueueItem.url, requestQueueItem.config).catch(async (e) => {\r\n            await this.apiErrorCatch(e);\r\n            throw e;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    delete = async (\r\n        url: string,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<Response> => {\r\n        let requestQueueItem = await this.createRequest('DELETE', url, null, options, authentication)\r\n        return fetch(requestQueueItem.url, requestQueueItem.config).catch(async (e) => {\r\n            await this.apiErrorCatch(e);\r\n            throw e;\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    postDownload = async (\r\n        url: string,\r\n        data: any,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<void> => {\r\n        /*let fullOptions: RequestInit = {\r\n            ...options,\r\n            responseType: 'blob'\r\n        };*/\r\n\r\n        let requestQueueItem = await this.createRequest('POST', url, data, options, authentication)\r\n        let response: Response = await fetch(requestQueueItem.url, requestQueueItem.config).catch(async (e) => {\r\n            await this.apiErrorCatch(e);\r\n            throw e;\r\n        })\r\n        await this.doBrowserDownload(response)\r\n    }\r\n\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    getDownload = async (\r\n        url: string,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ): Promise<void> => {\r\n        /*let fullOptions: RequestInit = {\r\n            ...options,\r\n            responseType: 'blob'\r\n        };*/\r\n        let requestQueueItem = await this.createRequest('GET', url, null, options, authentication)\r\n        let response = await fetch(requestQueueItem.url, requestQueueItem.config).catch(async (e) => {\r\n            await this.apiErrorCatch(e);\r\n            throw e;\r\n        })\r\n        await this.doBrowserDownload(response)\r\n    }\r\n\r\n    private doBrowserDownload = async (response: Response): Promise<void> => {\r\n        const blobContent = await response.blob()\r\n        let downloadUrl = window.URL.createObjectURL( blobContent );\r\n        let link = document.createElement('a');\r\n        link.href = downloadUrl;\r\n        let fileName = 'file';\r\n        let headerValue = response.headers.get('content-disposition')\r\n        if (headerValue) {\r\n            let fileNameMatch = headerValue.match(/filename=(.+)/);\r\n            if (fileNameMatch && fileNameMatch.length === 2) {\r\n                fileName = fileNameMatch[1].replaceAll(/[\"']/gi, '');\r\n            } else if (fileNameMatch && fileNameMatch.length === 1) {\r\n                fileName = fileNameMatch[0].replaceAll(/[\"']/gi, '');\r\n            }\r\n        }\r\n        link.setAttribute('download', fileName);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        link.remove();\r\n    }\r\n\r\n    /**\r\n     * @throws {Error|ApiAuthError|ApiError}\r\n     */\r\n    upload = async (\r\n        url: string,\r\n        files: Array<File>,\r\n        options: RequestInit = {},\r\n        authentication: boolean = true\r\n    ) => {\r\n\r\n        let formData = new FormData();\r\n        for (let i = 0; i < files.length; i++) {\r\n            formData.append('file[' + i + ']', files[i]);\r\n        }\r\n\r\n        let requestQueueItem = await this.createRequest('POST', url, formData, options, authentication)\r\n        return fetch(requestQueueItem.url, requestQueueItem.config).catch(async (e) => {\r\n            await this.apiErrorCatch(e);\r\n            throw e;\r\n        })\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default ApiService;\r\nexport {ApiConfig, ApiError, ApiAuthError, ApiAdvancedResponse, ApiRequestQueueItem}\r\n","class ApiError extends Error {\r\n    public code: number|string = 0\r\n    public data: any = {}\r\n    public request: Request|undefined = undefined\r\n    public response: Response|undefined = undefined\r\n    public guid: string = ''\r\n\r\n    constructor(\r\n        message: string,\r\n        code: number|string = 0,\r\n        request: Request|undefined = undefined,\r\n        response: Response|undefined = undefined,\r\n        data: any = {},\r\n        guid: string = ''\r\n    ) {\r\n        // Pass remaining arguments (including vendor specific ones) to parent constructor\r\n        super(message)\r\n\r\n        this.name = this.constructor.name;\r\n\r\n        // Maintains proper stack trace for where our error was thrown (only available on V8)\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ApiError)\r\n        }\r\n\r\n        // Custom debugging information\r\n        this.code = code\r\n        this.data = data\r\n        this.request = request\r\n        this.response = response\r\n        this.guid = guid\r\n    }\r\n}\r\n\r\nexport default ApiError;\r\n"],"mappings":"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","names":["ApiError"]}